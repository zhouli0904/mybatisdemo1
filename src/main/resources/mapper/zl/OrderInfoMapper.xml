<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springboot.mybatisdemo.dao.zl.OrderInfoMapper">
  <!--
• if:判断
• choose (when, otherwise):分支选择；带了break的swtich-case
	如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
• trim 字符串截取(where(封装查询条件), set(封装修改条件))
• foreach 遍历集合
	 -->
  <resultMap id="BaseResultMap" type="com.springboot.mybatisdemo.entity.zl.OrderInfo">
    <id column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="goods_list" jdbcType="VARCHAR" property="goodsList" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <!--
            抽取可重用的sql片段。方便后面引用
            1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
            2、include来引用已经抽取的sql：
            3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
                    include-property：取值的正确方式${prop},
                    #{不能使用这种方式}
        -->
  <sql id="Base_Column_List">
    order_id, goods_list, address, state
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from order_info
    where order_id = #{orderId,jdbcType=VARCHAR}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from order_info
    where order_id = #{orderId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.springboot.mybatisdemo.entity.zl.OrderInfo">
    insert into order_info (order_id, goods_list, address, 
      state)
    values (#{orderId,jdbcType=VARCHAR}, #{goodsList,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER})
  </insert>
  <!-- 后面多出的and或者or where标签不能解决
	 	prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。
	 			prefix给拼串后的整个字符串加一个前缀
	 	prefixOverrides="":
	 			前缀覆盖： 去掉整个字符串前面多余的字符
	 	suffix="":后缀
	 			suffix给拼串后的整个字符串加一个后缀
	 	suffixOverrides=""
	 			后缀覆盖：去掉整个字符串后面多余的字符
	 	-->
  <insert id="insertSelective" parameterType="com.springboot.mybatisdemo.entity.zl.OrderInfo">
    insert into order_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="goodsList != null">
        goods_list,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="goodsList != null">
        #{goodsList,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <!--  set标签，更新时去掉后面的，也可用trim实现-->
  <update id="updateByPrimaryKeySelective" parameterType="com.springboot.mybatisdemo.entity.zl.OrderInfo">
    update order_info
    <set>
      <if test="goodsList != null">
        goods_list = #{goodsList,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springboot.mybatisdemo.entity.zl.OrderInfo">
    update order_info
    set goods_list = #{goodsList,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where order_id = #{orderId,jdbcType=VARCHAR}
  </update>

<!--  方式1 加上1=1-->
<!--  <select id="getInfoByConditionIf" resultMap="BaseResultMap">-->
<!--    SELECT * from order_info-->
<!--    where 1=1-->
<!--    <if test="orderId != null">-->
<!--      and order_id = #{orderId}-->
<!--    </if>-->
<!--    <if test="address != null and address != ''">-->
<!--      and address = #{address}-->
<!--    </if>-->
<!--    <if test="state =0 or state = 1">-->
<!--      and state = #{state}-->
<!--    </if>-->
<!--  </select>-->

<!--  方式二 加上where标签 只会去掉前面的and 后面的and不会去掉-->
<!--  trim 标签可以自定义截取规则-->
  <select id="getInfoByConditionIf" resultMap="BaseResultMap">
    SELECT * from order_info
    <where>
    <if test="orderId != null">
      and order_id = #{orderId}
    </if>
    <if test="address != null and address != ''">
      and address = #{address}
    </if>
    <if test="state == 0 or state == 1">
      and state = #{state}
    </if>
    </where>
  </select>
  <select id="getInfoByConditionWhen" resultMap="BaseResultMap">
    SELECT * from order_info
    <where>
      <!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
      <choose>
        <when test="orderId != null">
            order_id = #{orderId}
        </when>
        <when test="address != null and address != ''">
            address = #{address}
        </when>
        <otherwise>
          state = 0
        </otherwise>
      </choose>
    </where>
  </select>
  <!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值

	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	  -->
  <select id="getInfoByConditionForEach" resultMap="BaseResultMap">
    SELECT * from order_info
    where order_id in
    <foreach collection="infos" item="item_id" separator=","
             open="(" close=")">
            #{item_id}
    </foreach>
  </select>

  <!-- 批量保存 -->
  <!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法-->
<!--  <insert id="addInfo">-->
<!--    INSERT into order_info values-->
<!--    <foreach collection="infos" item="info" separator=",">-->
<!--      (#{info.orderId}, #{info.goodsList}, #{info.address}, #{info.state})-->
<!--    </foreach>-->
<!--  </insert>-->

<!--   这种方式需要数据库连接属性spring.datasource.zl.jdbc-url=jdbc:mysql://localhost:3306/zl?allowMultiQueries=true
	 	这种分号分隔多个sql可以用于其他的批量操作（删除，修改） -->
  <insert id="addInfo">
    <foreach collection="infos" item="info" separator=";">
      INSERT into order_info values (#{info.orderId}, #{info.goodsList}, #{info.address}, #{info.state})
    </foreach>
  </insert>


</mapper>